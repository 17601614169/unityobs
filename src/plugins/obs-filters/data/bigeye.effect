uniform float4x4 ViewProj;
uniform texture2d image;
uniform float strongly;
uniform float gl_lefteyeX;
uniform float gl_lefteyeY;
uniform float gl_righteyeX;
uniform float gl_righteyeY;
uniform float gl_width;
uniform float gl_height;
sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};
struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
	//float2 uv2 : TEXCOORD1;
};
VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	//vert_out.uv2 = vert_in.uv;
	return vert_out;
}
float2 enlargeEye(float2 currentCoordinate, float2 circleCenter, float radius, float intensity)
{
    float currentDistance = distance(currentCoordinate, circleCenter);
    float weight = currentDistance / radius;
    weight = 1.0 - intensity * (1.0 - weight * weight);
    weight = clamp(weight, 0.0, 1.0);
    currentCoordinate = circleCenter + (currentCoordinate - circleCenter) * weight;
    return currentCoordinate;
}
float4 PSDrawBare(VertInOut vert_in) : TARGET
{
	

    float2 coordinate1 = vert_in.uv * float2(gl_width,gl_height);
	if(gl_lefteyeX == 0 || gl_lefteyeY==0 || gl_righteyeX ==0 || gl_righteyeY == 0){
        float4 colora = image.Sample(def_sampler,vert_in.uv);
	    return colora;
    }else{
		// 两个瞳孔的距离
		float eyeDistance = distance(float2(gl_lefteyeX,gl_lefteyeY), float2(gl_righteyeX,gl_righteyeY));
		float eyeEnlarge =  strongly * 0.2 ; // 放大倍数
		if (eyeEnlarge > 0.0) {
			float radius = eyeDistance * 0.33; // 眼睛放大半径
			coordinate1 = enlargeEye(coordinate1, float2(gl_lefteyeX,gl_lefteyeY) + (float2(gl_righteyeX,gl_righteyeY) - float2(gl_lefteyeX,gl_lefteyeY)) * 0.05, radius, eyeEnlarge);
			// coordinate = enlargeEye(coordinate, cartesianPoints[77 + i * 106] + (cartesianPoints[74 + i * 106] - cartesianPoints[77 + i * 106]) * 0.05, radius, eyeEnlarge);
			coordinate1 = enlargeEye(coordinate1, float2(gl_righteyeX,gl_righteyeY) + (float2(gl_lefteyeX,gl_lefteyeY) - float2(gl_righteyeX,gl_righteyeY)) * 0.05, radius, eyeEnlarge);
		}
		coordinate1 = coordinate1 / float2(gl_width,gl_height);
		// // 输出图像
		float4 colora = image.Sample(def_sampler,coordinate1);
		// float ff = gl_righteyeX/1000;
		return colora;
	}
}
technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}