uniform float4x4 ViewProj;
uniform texture2d image;
uniform float strongly;
sampler_state def2_sampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};
struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};
struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};
float4 gltexture2D(texture2d image1,float2 uv){
    return image1.Sample(def2_sampler,uv);
}
VertInOut VSDefault(VertDataIn v_in)
{
	VertInOut vert_out;
	vert_out.uv = v_in.uv;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return vert_out;
}
float3 rgb2hsv(float3 c)
{
    float4 K = float4(0.0, (-1.0 / 3.0), (2.0 / 3.0), -1.0);
    float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
    float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
float3 hsv2rgb(float3 c)
{
    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return float3(c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y));
}
float4 LUT3D(VertInOut v_in) : TARGET
{   
	
    float2 textureCoordinate1 = v_in.uv;
    texture2d inputTexture = image;
    float4 video = gltexture2D(inputTexture, textureCoordinate1);
    float4 rgba = video;
    float3 hsl = rgb2hsv(rgba.xyz);
    if(strongly != 1.0)
    {
        hsl.y = hsl.y*strongly;
    }
    float3 rgb = hsv2rgb(hsl);
    return float4(rgb,rgba.w);
}
technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);       
		pixel_shader  = LUT3D(v_in);
	}
}